// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model ServerStats {
  id          String      @id @default(uuid())
  cpuUsage    Float
  ramUsage    Float
  diskUsage   Float
  networkSpeed Float
  createdAt   DateTime @default(now())
}

model DockerContainer {
  id          String      @id @default(uuid())
  containerId String   @unique
  name        String
  status      String
  cpuUsage    Float?
  ramUsage    Float?
  createdAt   DateTime @default(now())
}

model Roomba {
  id          String  @id @default(uuid())
  name        String
  mac         String
  model       String
  software    String
  state       String
  batteryLevel Int
  batteryCycles Int
  fanSpeed     String
  binPresent   Boolean
  binFull      Boolean
  
  totalStatistics RoombaTotalStatistics?
  sessions        RoombaSession[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoombaTotalStatistics {
  id                  String  @id @default(uuid())
  roombaId            String  @unique
  roomba              Roomba  @relation(fields: [roombaId], references: [id])
  totalCleaningTime   Int
  averageMissionTime  Int
  totalMissions       Int
  successfulMissions  Int
  failedMissions      Int
  canceledMissions    Int
  totalScrubs         Int
  totalCleanedArea    Float
  
  updatedAt DateTime @updatedAt
}

model RoombaSession {
  id               String   @id @default(uuid())
  roombaId         String
  roomba           Roomba   @relation(fields: [roombaId], references: [id])
  missionStartTime DateTime?
  missionTime      Int
  cleanedArea      Float
  batteryLevel     Int
  errorCode        Int
  initiator        String
  
  createdAt        DateTime @default(now())
}





model WeatherData {
  id                String   @id @default(uuid()) // Unique identifier
  time              DateTime @default(now()) // Timestamp when the data was recorded
  main             String   // Main weather condition (e.g., "Clouds")
  temperature      Float    // Temperature in Â°C
  description      String   // Weather description (e.g., "Few clouds")
  humidity         Int      // Humidity in percentage
  visibility       Int      // Visibility in meters
  windSpeed       Float    // Wind speed in m/s
  windDirection   Int      // Wind direction in degrees
  sunrise         Int      // Unix timestamp for sunrise
  sunset          Int      // Unix timestamp for sunset
  updatedAt       DateTime @updatedAt // Auto-updates when new data is added
}


model NetworkDevice {
  id         String      @id @default(uuid())
  ipAddress  String   @unique
  macAddress String
  deviceName String?
  lastSeen   DateTime @default(now())
}